= *Database change management* =
== Introduction ==

Tarantino Database change management provides a set of tools which make the process of propagating database schema and data changes to multiple environments frictionless.

For a detailed presentation on this subject look at this: [http://tarantino.googlecode.com/svn/docs/Database-Change-Management.ppt Database Change Management]


===The problem that Database Change Management is attempting to solve:===
  * Most significant business applications rely on at least one relational database for persisting data
  * As new features are developed, database schema changes are often necessary – i.e. new tables, columns, views, and stored procedures
  * Database schema changes and corresponding code changes must always be deployed together 
  * While deploying software to a production environment, code files and libraries may usually be deleted or overwritten – Database files, however, must be intelligently manipulated so as not destroy vital business data

  The development tools available allow developers to make changes to their environement and do not address the problem of applying those changes to additional environments. (i.e. development, quality assurance, staging, production).

===The solution to this problem:===
Successful database change management requires that a consistent process be applied by all team members.  Without a consistent process than the tools provided in this solution will not provide its full value.

The proposed/ideal process that uses the Tarantino Database change management tools, would consist of:
  * Each developer using their own local database to do their development work.
  * Each environment using it's own database.  i.e. Development, Testing, Staging, Production
  * Each developer maintains his changes locally. When the database changes are ready to commit along side the application source code, the developer follows these steps:
    * Create a change script that wraps all of the database changes into a single transactional change script.  A Tool like Red Gate SQL Compare makes this a 30 second operation.
    * Save the change script in to a folder in your source tree call Update.
    * Commit the change script along with the source code that corresponds to the change.
  * Each developer runs the build script locally after receiving new schema changes scripts from the source code repository.




== Details ==
 * The system is based on a set of conventions which allows incremental changes to a database schema.

The conventions are to 
Create
Update

{{{
		<manageSqlDatabase
			scriptDirectory="${database.script.directory}"
			action="${action}"
			server="${database.server}"
			integratedAuthentication="${database.integrated}"
			database="${database.name}"
			username="${database.username}"
			password="${database.password}"
		/>
}}}